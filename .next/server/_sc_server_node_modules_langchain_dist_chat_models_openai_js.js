"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_sc_server_node_modules_langchain_dist_chat_models_openai_js";
exports.ids = ["_sc_server_node_modules_langchain_dist_chat_models_openai_js"];
exports.modules = {

/***/ "(sc_server)/./node_modules/langchain/dist/chat_models/base.js":
/*!*********************************************************!*\
  !*** ./node_modules/langchain/dist/chat_models/base.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseChatModel: () => (/* binding */ BaseChatModel),\n/* harmony export */   SimpleChatModel: () => (/* binding */ SimpleChatModel)\n/* harmony export */ });\n/* harmony import */ var _schema_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../schema/index.js */ \"(sc_server)/./node_modules/langchain/dist/schema/index.js\");\n/* harmony import */ var _base_language_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base_language/index.js */ \"(sc_server)/./node_modules/langchain/dist/base_language/index.js\");\n/* harmony import */ var _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../callbacks/manager.js */ \"(sc_server)/./node_modules/langchain/dist/callbacks/manager.js\");\n\n\n\nclass BaseChatModel extends _base_language_index_js__WEBPACK_IMPORTED_MODULE_1__.BaseLanguageModel {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"chat_models\",\n                this._llmType()\n            ]\n        });\n    }\n    async generate(messages, options, callbacks) {\n        const generations = [];\n        const llmOutputs = [];\n        let parsedOptions;\n        if (Array.isArray(options)) {\n            parsedOptions = {\n                stop: options\n            };\n        } else if (options?.timeout && !options.signal) {\n            parsedOptions = {\n                ...options,\n                signal: AbortSignal.timeout(options.timeout)\n            };\n        } else {\n            parsedOptions = options ?? {};\n        }\n        const callbackManager_ = await _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_2__.CallbackManager.configure(callbacks, this.callbacks, parsedOptions.tags, this.tags, {\n            verbose: this.verbose\n        });\n        const extra = {\n            options: parsedOptions,\n            invocation_params: this?.invocationParams()\n        };\n        const runManager = await callbackManager_?.handleChatModelStart(this.toJSON(), messages, undefined, undefined, extra);\n        try {\n            const results = await Promise.all(messages.map((messageList)=>this._generate(messageList, parsedOptions, runManager)));\n            for (const result of results){\n                if (result.llmOutput) {\n                    llmOutputs.push(result.llmOutput);\n                }\n                generations.push(result.generations);\n            }\n        } catch (err) {\n            await runManager?.handleLLMError(err);\n            throw err;\n        }\n        const output = {\n            generations,\n            llmOutput: llmOutputs.length ? this._combineLLMOutput?.(...llmOutputs) : undefined\n        };\n        await runManager?.handleLLMEnd(output);\n        Object.defineProperty(output, _schema_index_js__WEBPACK_IMPORTED_MODULE_0__.RUN_KEY, {\n            value: runManager ? {\n                runId: runManager?.runId\n            } : undefined,\n            configurable: true\n        });\n        return output;\n    }\n    /**\n     * Get the parameters used to invoke the model\n     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    invocationParams() {\n        return {};\n    }\n    _modelType() {\n        return \"base_chat_model\";\n    }\n    async generatePrompt(promptValues, options, callbacks) {\n        const promptMessages = promptValues.map((promptValue)=>promptValue.toChatMessages());\n        return this.generate(promptMessages, options, callbacks);\n    }\n    async call(messages, options, callbacks) {\n        const result = await this.generate([\n            messages\n        ], options, callbacks);\n        const generations = result.generations;\n        return generations[0][0].message;\n    }\n    async callPrompt(promptValue, options, callbacks) {\n        const promptMessages = promptValue.toChatMessages();\n        return this.call(promptMessages, options, callbacks);\n    }\n    async predictMessages(messages, options, callbacks) {\n        return this.call(messages, options, callbacks);\n    }\n    async predict(text, options, callbacks) {\n        const message = new _schema_index_js__WEBPACK_IMPORTED_MODULE_0__.HumanChatMessage(text);\n        const result = await this.call([\n            message\n        ], options, callbacks);\n        return result.text;\n    }\n}\nclass SimpleChatModel extends BaseChatModel {\n    async _generate(messages, options, runManager) {\n        const text = await this._call(messages, options, runManager);\n        const message = new _schema_index_js__WEBPACK_IMPORTED_MODULE_0__.AIChatMessage(text);\n        return {\n            generations: [\n                {\n                    text: message.text,\n                    message\n                }\n            ]\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/langchain/dist/chat_models/base.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/langchain/dist/chat_models/openai.js":
/*!***********************************************************!*\
  !*** ./node_modules/langchain/dist/chat_models/openai.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatOpenAI: () => (/* binding */ ChatOpenAI),\n/* harmony export */   PromptLayerChatOpenAI: () => (/* binding */ PromptLayerChatOpenAI)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"(sc_server)/./node_modules/openai/dist/index.js\");\n/* harmony import */ var _util_env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/env.js */ \"(sc_server)/./node_modules/langchain/dist/util/env.js\");\n/* harmony import */ var _util_axios_fetch_adapter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/axios-fetch-adapter.js */ \"(sc_server)/./node_modules/langchain/dist/util/axios-fetch-adapter.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.js */ \"(sc_server)/./node_modules/langchain/dist/chat_models/base.js\");\n/* harmony import */ var _schema_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../schema/index.js */ \"(sc_server)/./node_modules/langchain/dist/schema/index.js\");\n/* harmony import */ var _base_language_count_tokens_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../base_language/count_tokens.js */ \"(sc_server)/./node_modules/langchain/dist/base_language/count_tokens.js\");\n/* harmony import */ var _util_prompt_layer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/prompt-layer.js */ \"(sc_server)/./node_modules/langchain/dist/util/prompt-layer.js\");\n/* harmony import */ var _tools_convert_to_openai_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../tools/convert_to_openai.js */ \"(sc_server)/./node_modules/langchain/dist/tools/convert_to_openai.js\");\n\n\n\n\n\n\n\n\nfunction messageTypeToOpenAIRole(type) {\n    switch(type){\n        case \"system\":\n            return \"system\";\n        case \"ai\":\n            return \"assistant\";\n        case \"human\":\n            return \"user\";\n        case \"function\":\n            return \"function\";\n        default:\n            throw new Error(`Unknown message type: ${type}`);\n    }\n}\nfunction openAIResponseToChatMessage(message) {\n    switch(message.role){\n        case \"user\":\n            return new _schema_index_js__WEBPACK_IMPORTED_MODULE_4__.HumanChatMessage(message.content || \"\");\n        case \"assistant\":\n            return new _schema_index_js__WEBPACK_IMPORTED_MODULE_4__.AIChatMessage(message.content || \"\", {\n                function_call: message.function_call\n            });\n        case \"system\":\n            return new _schema_index_js__WEBPACK_IMPORTED_MODULE_4__.SystemChatMessage(message.content || \"\");\n        default:\n            return new _schema_index_js__WEBPACK_IMPORTED_MODULE_4__.ChatMessage(message.content || \"\", message.role ?? \"unknown\");\n    }\n}\n/**\n * Wrapper around OpenAI large language models that use the Chat endpoint.\n *\n * To use you should have the `openai` package installed, with the\n * `OPENAI_API_KEY` environment variable set.\n *\n * To use with Azure you should have the `openai` package installed, with the\n * `AZURE_OPENAI_API_KEY`,\n * `AZURE_OPENAI_API_INSTANCE_NAME`,\n * `AZURE_OPENAI_API_DEPLOYMENT_NAME`\n * and `AZURE_OPENAI_API_VERSION` environment variable set.\n *\n * @remarks\n * Any parameters that are valid to be passed to {@link\n * https://platform.openai.com/docs/api-reference/chat/create |\n * `openai.createCompletion`} can be passed through {@link modelKwargs}, even\n * if not explicitly available on this class.\n */ class ChatOpenAI extends _base_js__WEBPACK_IMPORTED_MODULE_3__.BaseChatModel {\n    get callKeys() {\n        return [\n            \"stop\",\n            \"signal\",\n            \"timeout\",\n            \"options\",\n            \"functions\",\n            \"tools\"\n        ];\n    }\n    get lc_secrets() {\n        return {\n            openAIApiKey: \"OPENAI_API_KEY\",\n            azureOpenAIApiKey: \"AZURE_OPENAI_API_KEY\"\n        };\n    }\n    get lc_aliases() {\n        return {\n            modelName: \"model\",\n            openAIApiKey: \"openai_api_key\",\n            azureOpenAIApiVersion: \"azure_openai_api_version\",\n            azureOpenAIApiKey: \"azure_openai_api_key\",\n            azureOpenAIApiInstanceName: \"azure_openai_api_instance_name\",\n            azureOpenAIApiDeploymentName: \"azure_openai_api_deployment_name\"\n        };\n    }\n    constructor(fields, /** @deprecated */ configuration){\n        super(fields ?? {});\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"temperature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"topP\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"frequencyPenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"presencePenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"n\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"logitBias\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"gpt-3.5-turbo\"\n        });\n        Object.defineProperty(this, \"modelKwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"stop\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"maxTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"openAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiVersion\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiInstanceName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiDeploymentName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"clientConfig\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.openAIApiKey = fields?.openAIApiKey ?? (0,_util_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"OPENAI_API_KEY\");\n        this.azureOpenAIApiKey = fields?.azureOpenAIApiKey ?? (0,_util_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"AZURE_OPENAI_API_KEY\");\n        if (!this.azureOpenAIApiKey && !this.openAIApiKey) {\n            throw new Error(\"(Azure) OpenAI API key not found\");\n        }\n        this.azureOpenAIApiInstanceName = fields?.azureOpenAIApiInstanceName ?? (0,_util_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n        this.azureOpenAIApiDeploymentName = fields?.azureOpenAIApiDeploymentName ?? (0,_util_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\");\n        this.azureOpenAIApiVersion = fields?.azureOpenAIApiVersion ?? (0,_util_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"AZURE_OPENAI_API_VERSION\");\n        this.modelName = fields?.modelName ?? this.modelName;\n        this.modelKwargs = fields?.modelKwargs ?? {};\n        this.timeout = fields?.timeout;\n        this.temperature = fields?.temperature ?? this.temperature;\n        this.topP = fields?.topP ?? this.topP;\n        this.frequencyPenalty = fields?.frequencyPenalty ?? this.frequencyPenalty;\n        this.presencePenalty = fields?.presencePenalty ?? this.presencePenalty;\n        this.maxTokens = fields?.maxTokens;\n        this.n = fields?.n ?? this.n;\n        this.logitBias = fields?.logitBias;\n        this.stop = fields?.stop;\n        this.streaming = fields?.streaming ?? false;\n        if (this.streaming && this.n > 1) {\n            throw new Error(\"Cannot stream results when n > 1\");\n        }\n        if (this.azureOpenAIApiKey) {\n            if (!this.azureOpenAIApiInstanceName) {\n                throw new Error(\"Azure OpenAI API instance name not found\");\n            }\n            if (!this.azureOpenAIApiDeploymentName) {\n                throw new Error(\"Azure OpenAI API deployment name not found\");\n            }\n            if (!this.azureOpenAIApiVersion) {\n                throw new Error(\"Azure OpenAI API version not found\");\n            }\n        }\n        this.clientConfig = {\n            apiKey: this.openAIApiKey,\n            ...configuration,\n            ...fields?.configuration\n        };\n    }\n    /**\n     * Get the parameters used to invoke the model\n     */ invocationParams() {\n        return {\n            model: this.modelName,\n            temperature: this.temperature,\n            top_p: this.topP,\n            frequency_penalty: this.frequencyPenalty,\n            presence_penalty: this.presencePenalty,\n            max_tokens: this.maxTokens === -1 ? undefined : this.maxTokens,\n            n: this.n,\n            logit_bias: this.logitBias,\n            stop: this.stop,\n            stream: this.streaming,\n            ...this.modelKwargs\n        };\n    }\n    /** @ignore */ _identifyingParams() {\n        return {\n            model_name: this.modelName,\n            ...this.invocationParams(),\n            ...this.clientConfig\n        };\n    }\n    /**\n     * Get the identifying parameters for the model\n     */ identifyingParams() {\n        return this._identifyingParams();\n    }\n    /** @ignore */ async _generate(messages, options, runManager) {\n        const tokenUsage = {};\n        if (this.stop && options?.stop) {\n            throw new Error(\"Stop found in input and default params\");\n        }\n        const params = this.invocationParams();\n        params.stop = options?.stop ?? params.stop;\n        params.functions = options?.functions ?? (options?.tools ? options?.tools.map(_tools_convert_to_openai_js__WEBPACK_IMPORTED_MODULE_7__.formatToOpenAIFunction) : undefined);\n        params.function_call = options?.function_call;\n        const messagesMapped = messages.map((message)=>({\n                role: messageTypeToOpenAIRole(message._getType()),\n                content: message.text,\n                name: message.name\n            }));\n        const data = params.stream ? await new Promise((resolve, reject)=>{\n            let response;\n            let rejected = false;\n            let resolved = false;\n            this.completionWithRetry({\n                ...params,\n                messages: messagesMapped\n            }, {\n                signal: options?.signal,\n                ...options?.options,\n                adapter: _util_axios_fetch_adapter_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n                responseType: \"stream\",\n                onmessage: (event)=>{\n                    if (event.data?.trim?.() === \"[DONE]\") {\n                        if (resolved || rejected) {\n                            return;\n                        }\n                        resolved = true;\n                        resolve(response);\n                    } else {\n                        const data = JSON.parse(event.data);\n                        if (data?.error) {\n                            if (rejected) {\n                                return;\n                            }\n                            rejected = true;\n                            reject(data.error);\n                            return;\n                        }\n                        const message = data;\n                        // on the first message set the response properties\n                        if (!response) {\n                            response = {\n                                id: message.id,\n                                object: message.object,\n                                created: message.created,\n                                model: message.model,\n                                choices: []\n                            };\n                        }\n                        // on all messages, update choice\n                        for (const part of message.choices ?? []){\n                            if (part != null) {\n                                let choice = response.choices.find((c)=>c.index === part.index);\n                                if (!choice) {\n                                    choice = {\n                                        index: part.index,\n                                        finish_reason: part.finish_reason ?? undefined\n                                    };\n                                    response.choices[part.index] = choice;\n                                }\n                                if (!choice.message) {\n                                    choice.message = {\n                                        role: part.delta?.role,\n                                        content: \"\"\n                                    };\n                                }\n                                if (part.delta.function_call && !choice.message.function_call) {\n                                    choice.message.function_call = {\n                                        name: \"\",\n                                        arguments: \"\"\n                                    };\n                                }\n                                choice.message.content += part.delta?.content ?? \"\";\n                                if (choice.message.function_call) {\n                                    choice.message.function_call.name += part.delta?.function_call?.name ?? \"\";\n                                    choice.message.function_call.arguments += part.delta?.function_call?.arguments ?? \"\";\n                                }\n                                // TODO this should pass part.index to the callback\n                                // when that's supported there\n                                // eslint-disable-next-line no-void\n                                void runManager?.handleLLMNewToken(part.delta?.content ?? \"\");\n                            // TODO we don't currently have a callback method for\n                            // sending the function call arguments\n                            }\n                        }\n                        // when all messages are finished, resolve\n                        if (!resolved && !rejected && message.choices?.every((c)=>c.finish_reason != null)) {\n                            resolved = true;\n                            resolve(response);\n                        }\n                    }\n                }\n            }).catch((error)=>{\n                if (!rejected) {\n                    rejected = true;\n                    reject(error);\n                }\n            });\n        }) : await this.completionWithRetry({\n            ...params,\n            messages: messagesMapped\n        }, {\n            signal: options?.signal,\n            ...options?.options\n        });\n        const { completion_tokens: completionTokens , prompt_tokens: promptTokens , total_tokens: totalTokens  } = data.usage ?? {};\n        if (completionTokens) {\n            tokenUsage.completionTokens = (tokenUsage.completionTokens ?? 0) + completionTokens;\n        }\n        if (promptTokens) {\n            tokenUsage.promptTokens = (tokenUsage.promptTokens ?? 0) + promptTokens;\n        }\n        if (totalTokens) {\n            tokenUsage.totalTokens = (tokenUsage.totalTokens ?? 0) + totalTokens;\n        }\n        const generations = [];\n        for (const part of data.choices){\n            const text = part.message?.content ?? \"\";\n            generations.push({\n                text,\n                message: openAIResponseToChatMessage(part.message ?? {\n                    role: \"assistant\"\n                })\n            });\n        }\n        return {\n            generations,\n            llmOutput: {\n                tokenUsage\n            }\n        };\n    }\n    async getNumTokensFromMessages(messages) {\n        let totalCount = 0;\n        let tokensPerMessage = 0;\n        let tokensPerName = 0;\n        // From: https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb\n        if ((0,_base_language_count_tokens_js__WEBPACK_IMPORTED_MODULE_5__.getModelNameForTiktoken)(this.modelName) === \"gpt-3.5-turbo\") {\n            tokensPerMessage = 4;\n            tokensPerName = -1;\n        } else if ((0,_base_language_count_tokens_js__WEBPACK_IMPORTED_MODULE_5__.getModelNameForTiktoken)(this.modelName).startsWith(\"gpt-4\")) {\n            tokensPerMessage = 3;\n            tokensPerName = 1;\n        }\n        const countPerMessage = await Promise.all(messages.map(async (message)=>{\n            const textCount = await this.getNumTokens(message.text);\n            const roleCount = await this.getNumTokens(messageTypeToOpenAIRole(message._getType()));\n            const nameCount = message.name !== undefined ? tokensPerName + await this.getNumTokens(message.name) : 0;\n            const count = textCount + tokensPerMessage + roleCount + nameCount;\n            totalCount += count;\n            return count;\n        }));\n        totalCount += 3; // every reply is primed with <|start|>assistant<|message|>\n        return {\n            totalCount,\n            countPerMessage\n        };\n    }\n    /** @ignore */ async completionWithRetry(request, options) {\n        if (!this.client) {\n            const endpoint = this.azureOpenAIApiKey ? `https://${this.azureOpenAIApiInstanceName}.openai.azure.com/openai/deployments/${this.azureOpenAIApiDeploymentName}` : this.clientConfig.basePath;\n            const clientConfig = new openai__WEBPACK_IMPORTED_MODULE_0__.Configuration({\n                ...this.clientConfig,\n                basePath: endpoint,\n                baseOptions: {\n                    timeout: this.timeout,\n                    ...this.clientConfig.baseOptions\n                }\n            });\n            this.client = new openai__WEBPACK_IMPORTED_MODULE_0__.OpenAIApi(clientConfig);\n        }\n        const axiosOptions = {\n            adapter: (0,_util_env_js__WEBPACK_IMPORTED_MODULE_1__.isNode)() ? undefined : _util_axios_fetch_adapter_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n            ...this.clientConfig.baseOptions,\n            ...options\n        };\n        if (this.azureOpenAIApiKey) {\n            axiosOptions.headers = {\n                \"api-key\": this.azureOpenAIApiKey,\n                ...axiosOptions.headers\n            };\n            axiosOptions.params = {\n                \"api-version\": this.azureOpenAIApiVersion,\n                ...axiosOptions.params\n            };\n        }\n        return this.caller.call(this.client.createChatCompletion.bind(this.client), request, axiosOptions).then((res)=>res.data);\n    }\n    _llmType() {\n        return \"openai\";\n    }\n    /** @ignore */ _combineLLMOutput(...llmOutputs) {\n        return llmOutputs.reduce((acc, llmOutput)=>{\n            if (llmOutput && llmOutput.tokenUsage) {\n                acc.tokenUsage.completionTokens += llmOutput.tokenUsage.completionTokens ?? 0;\n                acc.tokenUsage.promptTokens += llmOutput.tokenUsage.promptTokens ?? 0;\n                acc.tokenUsage.totalTokens += llmOutput.tokenUsage.totalTokens ?? 0;\n            }\n            return acc;\n        }, {\n            tokenUsage: {\n                completionTokens: 0,\n                promptTokens: 0,\n                totalTokens: 0\n            }\n        });\n    }\n}\nclass PromptLayerChatOpenAI extends ChatOpenAI {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"promptLayerApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"plTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"returnPromptLayerId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.promptLayerApiKey = fields?.promptLayerApiKey ?? (typeof process !== \"undefined\" ? process.env?.PROMPTLAYER_API_KEY : undefined);\n        this.plTags = fields?.plTags ?? [];\n        this.returnPromptLayerId = fields?.returnPromptLayerId ?? false;\n    }\n    async _generate(messages, options, runManager) {\n        const requestStartTime = Date.now();\n        let parsedOptions;\n        if (Array.isArray(options)) {\n            parsedOptions = {\n                stop: options\n            };\n        } else if (options?.timeout && !options.signal) {\n            parsedOptions = {\n                ...options,\n                signal: AbortSignal.timeout(options.timeout)\n            };\n        } else {\n            parsedOptions = options ?? {};\n        }\n        const generatedResponses = await super._generate(messages, parsedOptions, runManager);\n        const requestEndTime = Date.now();\n        const _convertMessageToDict = (message)=>{\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            let messageDict;\n            if (message._getType() === \"human\") {\n                messageDict = {\n                    role: \"user\",\n                    content: message.text\n                };\n            } else if (message._getType() === \"ai\") {\n                messageDict = {\n                    role: \"assistant\",\n                    content: message.text\n                };\n            } else if (message._getType() === \"system\") {\n                messageDict = {\n                    role: \"system\",\n                    content: message.text\n                };\n            } else if (message._getType() === \"generic\") {\n                messageDict = {\n                    role: message.role,\n                    content: message.text\n                };\n            } else {\n                throw new Error(`Got unknown type ${message}`);\n            }\n            return messageDict;\n        };\n        const _createMessageDicts = (messages, callOptions)=>{\n            const params = {\n                ...this.invocationParams(),\n                model: this.modelName\n            };\n            if (callOptions?.stop) {\n                if (Object.keys(params).includes(\"stop\")) {\n                    throw new Error(\"`stop` found in both the input and default params.\");\n                }\n            }\n            const messageDicts = messages.map((message)=>_convertMessageToDict(message));\n            return messageDicts;\n        };\n        for(let i = 0; i < generatedResponses.generations.length; i += 1){\n            const generation = generatedResponses.generations[i];\n            const messageDicts = _createMessageDicts(messages, parsedOptions);\n            let promptLayerRequestId;\n            const parsedResp = [\n                {\n                    content: generation.text,\n                    role: messageTypeToOpenAIRole(generation.message._getType())\n                }\n            ];\n            const promptLayerRespBody = await (0,_util_prompt_layer_js__WEBPACK_IMPORTED_MODULE_6__.promptLayerTrackRequest)(this.caller, \"langchain.PromptLayerChatOpenAI\", messageDicts, this._identifyingParams(), this.plTags, parsedResp, requestStartTime, requestEndTime, this.promptLayerApiKey);\n            if (this.returnPromptLayerId === true) {\n                if (promptLayerRespBody.success === true) {\n                    promptLayerRequestId = promptLayerRespBody.request_id;\n                }\n                if (!generation.generationInfo || typeof generation.generationInfo !== \"object\") {\n                    generation.generationInfo = {};\n                }\n                generation.generationInfo.promptLayerRequestId = promptLayerRequestId;\n            }\n        }\n        return generatedResponses;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/langchain/dist/chat_models/openai.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/langchain/dist/tools/convert_to_openai.js":
/*!****************************************************************!*\
  !*** ./node_modules/langchain/dist/tools/convert_to_openai.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatToOpenAIFunction: () => (/* binding */ formatToOpenAIFunction)\n/* harmony export */ });\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod-to-json-schema */ \"(sc_server)/./node_modules/zod-to-json-schema/index.js\");\n\nfunction formatToOpenAIFunction(tool) {\n    return {\n        name: tool.name,\n        description: tool.description,\n        parameters: (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(tool.schema)\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvdG9vbHMvY29udmVydF90b19vcGVuYWkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcUQ7QUFDOUMsU0FBU0MsdUJBQXVCQyxJQUFJO0lBQ3ZDLE9BQU87UUFDSEMsTUFBTUQsS0FBS0M7UUFDWEMsYUFBYUYsS0FBS0U7UUFDbEJDLFlBQVlMLG1FQUFlQSxDQUFDRSxLQUFLSTtJQUNyQztBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9vZC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC90b29scy9jb252ZXJ0X3RvX29wZW5haS5qcz80NjM1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHpvZFRvSnNvblNjaGVtYSB9IGZyb20gXCJ6b2QtdG8tanNvbi1zY2hlbWFcIjtcbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRUb09wZW5BSUZ1bmN0aW9uKHRvb2wpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiB0b29sLm5hbWUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiB0b29sLmRlc2NyaXB0aW9uLFxuICAgICAgICBwYXJhbWV0ZXJzOiB6b2RUb0pzb25TY2hlbWEodG9vbC5zY2hlbWEpLFxuICAgIH07XG59XG4iXSwibmFtZXMiOlsiem9kVG9Kc29uU2NoZW1hIiwiZm9ybWF0VG9PcGVuQUlGdW5jdGlvbiIsInRvb2wiLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJwYXJhbWV0ZXJzIiwic2NoZW1hIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/langchain/dist/tools/convert_to_openai.js\n");

/***/ })

};
;