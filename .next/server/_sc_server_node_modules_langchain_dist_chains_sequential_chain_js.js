"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_sc_server_node_modules_langchain_dist_chains_sequential_chain_js";
exports.ids = ["_sc_server_node_modules_langchain_dist_chains_sequential_chain_js"];
exports.modules = {

/***/ "(sc_server)/./node_modules/langchain/dist/chains/sequential_chain.js":
/*!****************************************************************!*\
  !*** ./node_modules/langchain/dist/chains/sequential_chain.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SequentialChain: () => (/* binding */ SequentialChain),\n/* harmony export */   SimpleSequentialChain: () => (/* binding */ SimpleSequentialChain)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(sc_server)/./node_modules/langchain/dist/chains/base.js\");\n/* harmony import */ var _util_set_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/set.js */ \"(sc_server)/./node_modules/langchain/dist/util/set.js\");\n\n\nfunction formatSet(input) {\n    return Array.from(input).map((i)=>`\"${i}\"`).join(\", \");\n}\n/**\n * Chain where the outputs of one chain feed directly into next.\n */ class SequentialChain extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain {\n    get inputKeys() {\n        return this.inputVariables;\n    }\n    get outputKeys() {\n        return this.outputVariables;\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"chains\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"returnAll\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.chains = fields.chains;\n        this.inputVariables = fields.inputVariables;\n        this.outputVariables = fields.outputVariables ?? [];\n        if (this.outputVariables.length > 0 && fields.returnAll) {\n            throw new Error(\"Either specify variables to return using `outputVariables` or use `returnAll` param. Cannot apply both conditions at the same time.\");\n        }\n        this.returnAll = fields.returnAll ?? false;\n        this._validateChains();\n    }\n    /** @ignore */ _validateChains() {\n        if (this.chains.length === 0) {\n            throw new Error(\"Sequential chain must have at least one chain.\");\n        }\n        const memoryKeys = this.memory?.memoryKeys ?? [];\n        const inputKeysSet = new Set(this.inputKeys);\n        const memoryKeysSet = new Set(memoryKeys);\n        const keysIntersection = (0,_util_set_js__WEBPACK_IMPORTED_MODULE_1__.intersection)(inputKeysSet, memoryKeysSet);\n        if (keysIntersection.size > 0) {\n            throw new Error(`The following keys: ${formatSet(keysIntersection)} are overlapping between memory and input keys of the chain variables. This can lead to unexpected behaviour. Please use input and memory keys that don't overlap.`);\n        }\n        const availableKeys = (0,_util_set_js__WEBPACK_IMPORTED_MODULE_1__.union)(inputKeysSet, memoryKeysSet);\n        for (const chain of this.chains){\n            const missingKeys = (0,_util_set_js__WEBPACK_IMPORTED_MODULE_1__.difference)(new Set(chain.inputKeys), availableKeys);\n            if (missingKeys.size > 0) {\n                throw new Error(`Missing variables for chain \"${chain._chainType()}\": ${formatSet(missingKeys)}. Only got the following variables: ${formatSet(availableKeys)}.`);\n            }\n            const outputKeysSet = new Set(chain.outputKeys);\n            const overlappingOutputKeys = (0,_util_set_js__WEBPACK_IMPORTED_MODULE_1__.intersection)(availableKeys, outputKeysSet);\n            if (overlappingOutputKeys.size > 0) {\n                throw new Error(`The following output variables for chain \"${chain._chainType()}\" are overlapping: ${formatSet(overlappingOutputKeys)}. This can lead to unexpected behaviour.`);\n            }\n            for (const outputKey of outputKeysSet){\n                availableKeys.add(outputKey);\n            }\n        }\n        if (this.outputVariables.length === 0) {\n            if (this.returnAll) {\n                const outputKeys = (0,_util_set_js__WEBPACK_IMPORTED_MODULE_1__.difference)(availableKeys, inputKeysSet);\n                this.outputVariables = Array.from(outputKeys);\n            } else {\n                this.outputVariables = this.chains[this.chains.length - 1].outputKeys;\n            }\n        } else {\n            const missingKeys = (0,_util_set_js__WEBPACK_IMPORTED_MODULE_1__.difference)(new Set(this.outputVariables), new Set(availableKeys));\n            if (missingKeys.size > 0) {\n                throw new Error(`The following output variables were expected to be in the final chain output but were not found: ${formatSet(missingKeys)}.`);\n            }\n        }\n    }\n    /** @ignore */ async _call(values, runManager) {\n        let input = {};\n        const allChainValues = values;\n        let i = 0;\n        for (const chain of this.chains){\n            i += 1;\n            input = await chain.call(allChainValues, runManager?.getChild(`step_${i}`));\n            for (const key of Object.keys(input)){\n                allChainValues[key] = input[key];\n            }\n        }\n        const output = {};\n        for (const key of this.outputVariables){\n            output[key] = allChainValues[key];\n        }\n        return output;\n    }\n    _chainType() {\n        return \"sequential_chain\";\n    }\n    static async deserialize(data) {\n        const chains = [];\n        const inputVariables = data.input_variables;\n        const outputVariables = data.output_variables;\n        const serializedChains = data.chains;\n        for (const serializedChain of serializedChains){\n            const deserializedChain = await _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain.deserialize(serializedChain);\n            chains.push(deserializedChain);\n        }\n        return new SequentialChain({\n            chains,\n            inputVariables,\n            outputVariables\n        });\n    }\n    serialize() {\n        const chains = [];\n        for (const chain of this.chains){\n            chains.push(chain.serialize());\n        }\n        return {\n            _type: this._chainType(),\n            input_variables: this.inputVariables,\n            output_variables: this.outputVariables,\n            chains\n        };\n    }\n}\n/**\n * Simple chain where a single string output of one chain is fed directly into the next.\n * @augments BaseChain\n * @augments SimpleSequentialChainInput\n *\n * @example\n * ```ts\n * import { SimpleSequentialChain, LLMChain } from \"langchain/chains\";\n * import { OpenAI } from \"langchain/llms/openai\";\n * import { PromptTemplate } from \"langchain/prompts\";\n *\n * // This is an LLMChain to write a synopsis given a title of a play.\n * const llm = new OpenAI({ temperature: 0 });\n * const template = `You are a playwright. Given the title of play, it is your job to write a synopsis for that title.\n *\n * Title: {title}\n * Playwright: This is a synopsis for the above play:`\n * const promptTemplate = new PromptTemplate({ template, inputVariables: [\"title\"] });\n * const synopsisChain = new LLMChain({ llm, prompt: promptTemplate });\n *\n *\n * // This is an LLMChain to write a review of a play given a synopsis.\n * const reviewLLM = new OpenAI({ temperature: 0 })\n * const reviewTemplate = `You are a play critic from the New York Times. Given the synopsis of play, it is your job to write a review for that play.\n *\n * Play Synopsis:\n * {synopsis}\n * Review from a New York Times play critic of the above play:`\n * const reviewPromptTemplate = new PromptTemplate({ template: reviewTemplate, inputVariables: [\"synopsis\"] });\n * const reviewChain = new LLMChain({ llm: reviewLLM, prompt: reviewPromptTemplate });\n *\n * const overallChain = new SimpleSequentialChain({chains: [synopsisChain, reviewChain], verbose:true})\n * const review = await overallChain.run(\"Tragedy at sunset on the beach\")\n * // the variable review contains resulting play review.\n * ```\n */ class SimpleSequentialChain extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain {\n    get inputKeys() {\n        return [\n            this.inputKey\n        ];\n    }\n    get outputKeys() {\n        return [\n            this.outputKey\n        ];\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"chains\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input\"\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"output\"\n        });\n        Object.defineProperty(this, \"trimOutputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.chains = fields.chains;\n        this.trimOutputs = fields.trimOutputs ?? false;\n        this._validateChains();\n    }\n    /** @ignore */ _validateChains() {\n        for (const chain of this.chains){\n            if (chain.inputKeys.filter((k)=>!chain.memory?.memoryKeys.includes(k) ?? true).length !== 1) {\n                throw new Error(`Chains used in SimpleSequentialChain should all have one input, got ${chain.inputKeys.length} for ${chain._chainType()}.`);\n            }\n            if (chain.outputKeys.length !== 1) {\n                throw new Error(`Chains used in SimpleSequentialChain should all have one output, got ${chain.outputKeys.length} for ${chain._chainType()}.`);\n            }\n        }\n    }\n    /** @ignore */ async _call(values, runManager) {\n        let input = values[this.inputKey];\n        let i = 0;\n        for (const chain of this.chains){\n            i += 1;\n            input = (await chain.call({\n                [chain.inputKeys[0]]: input,\n                signal: values.signal\n            }, runManager?.getChild(`step_${i}`)))[chain.outputKeys[0]];\n            if (this.trimOutputs) {\n                input = input.trim();\n            }\n            await runManager?.handleText(input);\n        }\n        return {\n            [this.outputKey]: input\n        };\n    }\n    _chainType() {\n        return \"simple_sequential_chain\";\n    }\n    static async deserialize(data) {\n        const chains = [];\n        const serializedChains = data.chains;\n        for (const serializedChain of serializedChains){\n            const deserializedChain = await _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain.deserialize(serializedChain);\n            chains.push(deserializedChain);\n        }\n        return new SimpleSequentialChain({\n            chains\n        });\n    }\n    serialize() {\n        const chains = [];\n        for (const chain of this.chains){\n            chains.push(chain.serialize());\n        }\n        return {\n            _type: this._chainType(),\n            chains\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/langchain/dist/chains/sequential_chain.js\n");

/***/ }),

/***/ "(sc_server)/./node_modules/langchain/dist/util/set.js":
/*!*************************************************!*\
  !*** ./node_modules/langchain/dist/util/set.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   difference: () => (/* binding */ difference),\n/* harmony export */   intersection: () => (/* binding */ intersection),\n/* harmony export */   union: () => (/* binding */ union)\n/* harmony export */ });\n/**\n * Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#implementing_basic_set_operations\n */ /**\n * returns intersection of two sets\n */ function intersection(setA, setB) {\n    const _intersection = new Set();\n    for (const elem of setB){\n        if (setA.has(elem)) {\n            _intersection.add(elem);\n        }\n    }\n    return _intersection;\n}\n/**\n * returns union of two sets\n */ function union(setA, setB) {\n    const _union = new Set(setA);\n    for (const elem of setB){\n        _union.add(elem);\n    }\n    return _union;\n}\n/**\n * returns difference of two sets\n */ function difference(setA, setB) {\n    const _difference = new Set(setA);\n    for (const elem of setB){\n        _difference.delete(elem);\n    }\n    return _difference;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNjX3NlcnZlcikvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvdXRpbC9zZXQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0NBRUMsR0FDRDs7Q0FFQyxHQUNNLFNBQVNBLGFBQWFDLElBQUksRUFBRUMsSUFBSTtJQUNuQyxNQUFNQyxnQkFBZ0IsSUFBSUM7SUFDMUIsS0FBSyxNQUFNQyxRQUFRSCxLQUFNO1FBQ3JCLElBQUlELEtBQUtLLElBQUlELE9BQU87WUFDaEJGLGNBQWNJLElBQUlGO1FBQ3RCO0lBQ0o7SUFDQSxPQUFPRjtBQUNYO0FBQ0E7O0NBRUMsR0FDTSxTQUFTSyxNQUFNUCxJQUFJLEVBQUVDLElBQUk7SUFDNUIsTUFBTU8sU0FBUyxJQUFJTCxJQUFJSDtJQUN2QixLQUFLLE1BQU1JLFFBQVFILEtBQU07UUFDckJPLE9BQU9GLElBQUlGO0lBQ2Y7SUFDQSxPQUFPSTtBQUNYO0FBQ0E7O0NBRUMsR0FDTSxTQUFTQyxXQUFXVCxJQUFJLEVBQUVDLElBQUk7SUFDakMsTUFBTVMsY0FBYyxJQUFJUCxJQUFJSDtJQUM1QixLQUFLLE1BQU1JLFFBQVFILEtBQU07UUFDckJTLFlBQVlDLE9BQU9QO0lBQ3ZCO0lBQ0EsT0FBT007QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL21vb2QvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvdXRpbC9zZXQuanM/ZmQzOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNvdXJjZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU2V0I2ltcGxlbWVudGluZ19iYXNpY19zZXRfb3BlcmF0aW9uc1xuICovXG4vKipcbiAqIHJldHVybnMgaW50ZXJzZWN0aW9uIG9mIHR3byBzZXRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnRlcnNlY3Rpb24oc2V0QSwgc2V0Qikge1xuICAgIGNvbnN0IF9pbnRlcnNlY3Rpb24gPSBuZXcgU2V0KCk7XG4gICAgZm9yIChjb25zdCBlbGVtIG9mIHNldEIpIHtcbiAgICAgICAgaWYgKHNldEEuaGFzKGVsZW0pKSB7XG4gICAgICAgICAgICBfaW50ZXJzZWN0aW9uLmFkZChlbGVtKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gX2ludGVyc2VjdGlvbjtcbn1cbi8qKlxuICogcmV0dXJucyB1bmlvbiBvZiB0d28gc2V0c1xuICovXG5leHBvcnQgZnVuY3Rpb24gdW5pb24oc2V0QSwgc2V0Qikge1xuICAgIGNvbnN0IF91bmlvbiA9IG5ldyBTZXQoc2V0QSk7XG4gICAgZm9yIChjb25zdCBlbGVtIG9mIHNldEIpIHtcbiAgICAgICAgX3VuaW9uLmFkZChlbGVtKTtcbiAgICB9XG4gICAgcmV0dXJuIF91bmlvbjtcbn1cbi8qKlxuICogcmV0dXJucyBkaWZmZXJlbmNlIG9mIHR3byBzZXRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaWZmZXJlbmNlKHNldEEsIHNldEIpIHtcbiAgICBjb25zdCBfZGlmZmVyZW5jZSA9IG5ldyBTZXQoc2V0QSk7XG4gICAgZm9yIChjb25zdCBlbGVtIG9mIHNldEIpIHtcbiAgICAgICAgX2RpZmZlcmVuY2UuZGVsZXRlKGVsZW0pO1xuICAgIH1cbiAgICByZXR1cm4gX2RpZmZlcmVuY2U7XG59XG4iXSwibmFtZXMiOlsiaW50ZXJzZWN0aW9uIiwic2V0QSIsInNldEIiLCJfaW50ZXJzZWN0aW9uIiwiU2V0IiwiZWxlbSIsImhhcyIsImFkZCIsInVuaW9uIiwiX3VuaW9uIiwiZGlmZmVyZW5jZSIsIl9kaWZmZXJlbmNlIiwiZGVsZXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/langchain/dist/util/set.js\n");

/***/ })

};
;